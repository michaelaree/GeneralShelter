<?php

use Drupal\Core\Routing\RouteMatchInterface;
Use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function vocabulary_catalog_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.vocabulary_catalog':
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Display the list of terms and sub terms with node count values.') . '</p>';
    return $output;
}
}

/**
 * Get the vocabulary catalog data
 * @param  [type] $config_data
 * @return [type]
 */
function getVocabularyCatalog($config_data) {
    $active_vocabularies = $config_data['active_vocabularies'];
    $disabled_terms = $config_data['disabled_terms'];
    $terms_display_layout = $config_data['terms_display_layout'];

    $vocabularies = Vocabulary::loadMultiple();
    $catalog_data = array();
    if($vocabularies) {
        foreach($vocabularies as $voc) {
            $voc_id = $voc->id();
            if(in_array($voc_id, $active_vocabularies)) {
                $voc_label = $voc->label();
                $term_data = array();
                $active_tids = array();

                $url = Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $voc_id]);
                $link = Link::fromTextAndUrl($voc_label, $url);
                $link = $link->toRenderable();
                $voc_rendered = \Drupal::service('renderer')->render($link);

                $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($voc_id);
                if($terms) {
                    foreach ($terms as $term) {
                     $status = $term->status;
                     $show_term = true;

                        // if the terms is not published and if show only published terms is configured
                        // then hide the terms from catalog
                     if(!$disabled_terms && !$status) {
                        $show_term = false;
                    }

                    if($show_term) {
                        $status = $term->status;
                        $tid = $term->tid;
                        $name = $term->name;
                        $parents = $term->parents;
                        $active_tids[] = $tid;

                        $parent_ids = array_values($parents);
                        $parent_ids = array_filter($parent_ids);
                        $parent_id = (isset($parent_ids[0]))?$parent_ids[0]:0;

                        $url = Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $tid]);
                        $link = Link::fromTextAndUrl($name, $url);
                        $link = $link->toRenderable();
                        $rendered = \Drupal::service('renderer')->render($link);

                        $query = \Drupal::database()->select('node_field_data', 'n');
                        $query->leftJoin('taxonomy_index', 'ti', 'n.nid = ti.nid');
                        $query->addField('n', 'nid');
                        $query->fields('n', ['nid', 'type']);
                        $query->fields('ti', ['tid']);
                        $query->condition('ti.tid', $term->tid);

                        $results = $query->execute();
                        $node_query_results = $results->fetchAll();
                        $count = count($node_query_results);

                        $catalog_data[$voc_id]['terms_data'][] = array(
                          'id' => $tid,
                          'name' => $name,
                          'count' => $count,
                          'rendered' => $rendered,
                          'parent_id' => $parent_id,

                      );
                    }
                }
            }

            if(!empty($active_tids)) {
                $query = \Drupal::database()->select('node_field_data', 'n');
                $query->leftJoin('taxonomy_index', 'ti', 'n.nid = ti.nid');
                $query->addField('n', 'nid');
                $query->fields('n', ['nid', 'type']);
                $query->fields('ti', ['tid']);
                $query->condition('ti.tid', $active_tids, 'IN');

                $results = $query->execute();
                $node_query_results = $results->fetchAll();
                $term_count = count($node_query_results);

                $catalog_data[$voc_id]['count'] = $term_count;
                $catalog_data[$voc_id]['rendered'] = $voc_rendered;
            }

        }

        // Display terms in tree structure
        if($terms_display_layout == '1' && !empty($catalog_data)) {
            foreach ($catalog_data as $key => $value) {
                $tree = build_catalog_tree($value['terms_data'], 'parent_id', 'id');
                $catalog_data[$key]['terms_data'] = $tree;
            }
        }
    }
}

return $catalog_data;
}

/**
 * @param array $flatList - a flat list of tree nodes; a node is an array with keys: id, parent_id, name.
 */
function build_catalog_tree(array $flatList)
{
    $grouped = [];
    foreach ($flatList as $node){
        $grouped[$node['parent_id']][] = $node;
    }

    $fnBuilder = function($siblings) use (&$fnBuilder, $grouped) {
        foreach ($siblings as $k => $sibling) {
            $id = $sibling['id'];
            if(isset($grouped[$id])) {
                $sibling['children'] = $fnBuilder($grouped[$id]);
            }
            $siblings[$k] = $sibling;
        }
        return $siblings;
    };

    return $fnBuilder($grouped[0]);
}

/**
* Implements hook_theme().
*/

function vocabulary_catalog_theme($existing, $type, $theme, $path) {
    return [
        'vocabulary_catalog_block' => [
            'variables' => ['content' => NULL],
        ]
    ];
}